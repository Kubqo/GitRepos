[{"C:\\Users\\jakub\\Development\\Repos-and-Org-of-Git-User\\src\\index.tsx":"1","C:\\Users\\jakub\\Development\\Repos-and-Org-of-Git-User\\src\\App.tsx":"2","C:\\Users\\jakub\\Development\\Repos-and-Org-of-Git-User\\src\\components\\userinfo.tsx":"3","C:\\Users\\jakub\\Development\\Repos-and-Org-of-Git-User\\src\\components\\searchbar.tsx":"4","C:\\Users\\jakub\\Development\\Repos-and-Org-of-Git-User\\src\\components\\theme.tsx":"5","C:\\Users\\jakub\\Development\\Repos-and-Org-of-Git-User\\src\\components\\data.tsx":"6","C:\\Users\\jakub\\Development\\Repos-and-Org-of-Git-User\\src\\components\\ThemeContext.tsx":"7"},{"size":447,"mtime":1608400450050,"results":"8","hashOfConfig":"9"},{"size":865,"mtime":1608406434249,"results":"10","hashOfConfig":"9"},{"size":4170,"mtime":1608418520535,"results":"11","hashOfConfig":"9"},{"size":1670,"mtime":1608407844451,"results":"12","hashOfConfig":"9"},{"size":656,"mtime":1608406416132,"results":"13","hashOfConfig":"9"},{"size":682,"mtime":1608418350153,"results":"14","hashOfConfig":"9"},{"size":412,"mtime":1608405272839,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"1f4gop0",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"18"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"C:\\Users\\jakub\\Development\\Repos-and-Org-of-Git-User\\src\\index.tsx",[],["32","33"],"C:\\Users\\jakub\\Development\\Repos-and-Org-of-Git-User\\src\\App.tsx",[],"C:\\Users\\jakub\\Development\\Repos-and-Org-of-Git-User\\src\\components\\userinfo.tsx",["34","35","36","37","38","39"],"import React, { useEffect, useState } from \"react\";\r\nimport { useHistory, useLocation } from \"react-router-dom\";\r\nimport { getRepos, getUserData } from \"./data\";\r\nimport { Avatar, Button, Card, Spin, Statistic } from \"antd\";\r\nimport {\r\n  CodeOutlined,\r\n  EditOutlined,\r\n  EllipsisOutlined,\r\n  LeftOutlined,\r\n  LoadingOutlined,\r\n  SettingOutlined,\r\n} from \"@ant-design/icons\";\r\nimport ThemeButton from \"./theme\";\r\nimport Meta from \"antd/lib/card/Meta\";\r\nimport { Theme } from \"./ThemeContext\";\r\nimport Modal from \"antd/lib/modal/Modal\";\r\n\r\nconst UserInfo: React.FC = () => {\r\n  const location = useLocation();\r\n  const history = useHistory();\r\n\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [repos, setRepos] = useState<[]>([]);\r\n  const [org, setOrg] = useState<[]>([]);\r\n  const [picture, setPicture] = useState<string>();\r\n\r\n  const [visibleRepos, setVisibleRepos] = useState(false);\r\n  const [visibleOrgs, setVisibleOrgs] = useState(false);\r\n\r\n  const antIcon = <LoadingOutlined style={{ fontSize: 24 }} spin />;\r\n\r\n  // This will get you data from api and set it to useState hooks\r\n  const Fetch = async (username: string) => {\r\n    const repos = await getRepos(username);\r\n    const orgAndData = await getUserData(username);\r\n    const onlyNames = repos.map((element: { name: string }) => element.name);\r\n    const onlyOrgsNames = orgAndData.orgs.map(\r\n      (element: { login: string }) => element.login\r\n    );\r\n    const pic = orgAndData.user.avatar_url;\r\n    \r\n    setOrg(onlyOrgsNames);\r\n    setRepos(onlyNames);\r\n    setPicture(pic);\r\n\r\n    setIsLoading(false);\r\n  };\r\n\r\n  // Get informations from api once\r\n  useEffect(() => {\r\n    Fetch(String(location.state));\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      {/* This Button is changing theme */}\r\n      <ThemeButton />\r\n      {/* This Button will take you to Search page */}\r\n      <Button\r\n        shape=\"circle\"\r\n        icon={<LeftOutlined />}\r\n        style={{ float: \"left\", marginTop: 20, marginLeft: 20 }}\r\n        onClick={() => history.push(\"/Search\")}\r\n      />\r\n      <h1 style={{ color: \"var(--theme-page-text)\", paddingTop: \"5%\" }}>\r\n        Info About {location.state}\r\n      </h1>\r\n\r\n      {isLoading ? (\r\n        <Spin indicator={antIcon} />\r\n      ) : (\r\n        <div>\r\n          <Card\r\n            style={{ width: 360, background: \"white\", margin: \"auto\" }}\r\n            actions={[\r\n              <p onClick={() => setVisibleRepos(true)}>Repositories</p>,\r\n              <p onClick={() => setVisibleOrgs(true)}> Organizations</p>,\r\n            ]}\r\n          >\r\n            <Meta\r\n              avatar={\r\n                <Avatar src={picture} style={{ width: 125, height: 125 }} />\r\n              }\r\n              // title={}\r\n              description={\r\n                <div style={{ display: \"inline-block\" }}>\r\n                  <Statistic title=\"Repositories\" value={repos.length} />\r\n                  <Statistic title=\"Organizations\" value={org.length} />\r\n                </div>\r\n              }\r\n            />\r\n          </Card>\r\n\r\n          {/* <h2 style={{ color: \"var(--theme-page-text)\" }}>Repos:</h2>\r\n          {repos.map((element) => (\r\n            <p key={element}> {element} </p>\r\n          ))}\r\n\r\n          <h2 style={{ color: \"var(--theme-page-text)\" }}>Orgs:</h2>\r\n          {}\r\n\r\n          {org.map((element) => (\r\n            <p key={element}> {element} </p>\r\n          ))}\r\n           */}\r\n          <Modal\r\n            title=\"Repositories\"\r\n            centered\r\n            visible={visibleRepos}\r\n            onOk={() => setVisibleRepos(false)}\r\n            onCancel={() => setVisibleRepos(false)}\r\n          >\r\n            {repos.map((element) => (\r\n            <p key={element}> {element} </p>\r\n          ))}\r\n          </Modal>\r\n\r\n          <Modal\r\n            title=\"Organizations\"\r\n            centered\r\n            visible={visibleOrgs}\r\n            onOk={() => setVisibleOrgs(false)}\r\n            onCancel={() => setVisibleOrgs(false)}\r\n          >\r\n            {org.map((element) => (\r\n            <p key={element}> {element} </p>\r\n          ))}\r\n          </Modal>\r\n\r\n\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default UserInfo;\r\n","C:\\Users\\jakub\\Development\\Repos-and-Org-of-Git-User\\src\\components\\searchbar.tsx",[],"C:\\Users\\jakub\\Development\\Repos-and-Org-of-Git-User\\src\\components\\theme.tsx",[],"C:\\Users\\jakub\\Development\\Repos-and-Org-of-Git-User\\src\\components\\data.tsx",[],"C:\\Users\\jakub\\Development\\Repos-and-Org-of-Git-User\\src\\components\\ThemeContext.tsx",[],{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","severity":1,"message":"45","line":6,"column":3,"nodeType":"46","messageId":"47","endLine":6,"endColumn":15},{"ruleId":"44","severity":1,"message":"48","line":7,"column":3,"nodeType":"46","messageId":"47","endLine":7,"endColumn":15},{"ruleId":"44","severity":1,"message":"49","line":8,"column":3,"nodeType":"46","messageId":"47","endLine":8,"endColumn":19},{"ruleId":"44","severity":1,"message":"50","line":11,"column":3,"nodeType":"46","messageId":"47","endLine":11,"endColumn":18},{"ruleId":"44","severity":1,"message":"51","line":15,"column":10,"nodeType":"46","messageId":"47","endLine":15,"endColumn":15},{"ruleId":"52","severity":1,"message":"53","line":52,"column":6,"nodeType":"54","endLine":52,"endColumn":8,"suggestions":"55"},"no-native-reassign",["56"],"no-negated-in-lhs",["57"],"@typescript-eslint/no-unused-vars","'CodeOutlined' is defined but never used.","Identifier","unusedVar","'EditOutlined' is defined but never used.","'EllipsisOutlined' is defined but never used.","'SettingOutlined' is defined but never used.","'Theme' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'location.state'. Either include it or remove the dependency array.","ArrayExpression",["58"],"no-global-assign","no-unsafe-negation",{"desc":"59","fix":"60"},"Update the dependencies array to be: [location.state]",{"range":"61","text":"62"},[1697,1699],"[location.state]"]