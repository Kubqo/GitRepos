[{"C:\\Users\\jakub\\Development\\Repos-and-Org-of-Git-User\\src\\index.tsx":"1","C:\\Users\\jakub\\Development\\Repos-and-Org-of-Git-User\\src\\App.tsx":"2","C:\\Users\\jakub\\Development\\Repos-and-Org-of-Git-User\\src\\components\\userinfo.tsx":"3","C:\\Users\\jakub\\Development\\Repos-and-Org-of-Git-User\\src\\components\\searchbar.tsx":"4","C:\\Users\\jakub\\Development\\Repos-and-Org-of-Git-User\\src\\components\\theme.tsx":"5","C:\\Users\\jakub\\Development\\Repos-and-Org-of-Git-User\\src\\components\\data.tsx":"6","C:\\Users\\jakub\\Development\\Repos-and-Org-of-Git-User\\src\\components\\ThemeContext.tsx":"7"},{"size":447,"mtime":1608400450050,"results":"8","hashOfConfig":"9"},{"size":939,"mtime":1608729852063,"results":"10","hashOfConfig":"9"},{"size":4580,"mtime":1608492303871,"results":"11","hashOfConfig":"9"},{"size":1738,"mtime":1608730797720,"results":"12","hashOfConfig":"9"},{"size":964,"mtime":1608492242357,"results":"13","hashOfConfig":"9"},{"size":686,"mtime":1608492250148,"results":"14","hashOfConfig":"9"},{"size":418,"mtime":1608492257221,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"1f4gop0",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"18"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"18"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"C:\\Users\\jakub\\Development\\Repos-and-Org-of-Git-User\\src\\index.tsx",[],["33","34"],"C:\\Users\\jakub\\Development\\Repos-and-Org-of-Git-User\\src\\App.tsx",[],"C:\\Users\\jakub\\Development\\Repos-and-Org-of-Git-User\\src\\components\\userinfo.tsx",["35"],"import React, { useEffect, useState } from \"react\";\r\nimport { useHistory, useLocation } from \"react-router-dom\";\r\nimport { getRepos, getUserData } from \"./data\";\r\nimport { Avatar, Button, Card, Spin, Statistic } from \"antd\";\r\nimport { LeftOutlined, LoadingOutlined } from \"@ant-design/icons\";\r\nimport Meta from \"antd/lib/card/Meta\";\r\nimport Modal from \"antd/lib/modal/Modal\";\r\n\r\nconst UserInfo: React.FC = () => {\r\n  const location = useLocation();\r\n  const history = useHistory();\r\n\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [repos, setRepos] = useState<[]>([]);\r\n  const [org, setOrg] = useState<[]>([]);\r\n  const [picture, setPicture] = useState<string>();\r\n  const [isError, setIsError] = useState<boolean>(false);\r\n\r\n  const [visibleRepos, setVisibleRepos] = useState(false);\r\n  const [visibleOrgs, setVisibleOrgs] = useState(false);\r\n\r\n  const antIcon = <LoadingOutlined style={{ fontSize: 24 }} spin />;\r\n\r\n  // This will get you data from api and set it to useState hooks\r\n  const Fetch = async (username: string) => {\r\n    try {\r\n      const repos = await getRepos(username);\r\n      const orgAndData = await getUserData(username);\r\n\r\n      const onlyNames = repos.map((element: { name: string }) => element.name);\r\n      const onlyOrgsNames = orgAndData.orgs.map(\r\n        (element: { login: string }) => element.login\r\n      );\r\n      const pic = orgAndData.user.avatar_url;\r\n\r\n      setOrg(onlyOrgsNames);\r\n      setRepos(onlyNames);\r\n      setPicture(pic);\r\n\r\n      setIsLoading(false);\r\n    } catch (err) {\r\n      setIsError(true);\r\n    }\r\n  };\r\n\r\n  // Get informations from api once\r\n  useEffect(() => {\r\n    Fetch(String(location.state));\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <Button\r\n        shape=\"circle\"\r\n        icon={<LeftOutlined />}\r\n        style={{ float: \"left\", marginTop: 20, marginLeft: 20 }}\r\n        onClick={() => history.push(\"/Search\")}\r\n      />\r\n      <h1 style={{ color: \"var(--theme-page-text)\", paddingTop: \"5%\" }}>\r\n        Info About {location.state}\r\n      </h1>\r\n\r\n      {isError ? (\r\n        <h2 style={{ color: \"var(--theme-page-text)\", paddingTop: \"5%\" }}>\r\n          User Not Found\r\n        </h2>\r\n      ) : isLoading ? (\r\n        <Spin indicator={antIcon} />\r\n      ) : (\r\n        <div>\r\n          <Card\r\n            style={{ width: 360, background: \"white\", margin: \"auto\" }}\r\n            actions={[\r\n              <p onClick={() => setVisibleRepos(true)}>Repositories</p>,\r\n              <p onClick={() => setVisibleOrgs(true)}> Organizations</p>,\r\n            ]}\r\n          >\r\n            <Meta\r\n              avatar={\r\n                <Avatar src={picture} style={{ width: 125, height: 125 }} />\r\n              }\r\n              description={\r\n                <div style={{ display: \"inline-block\" }}>\r\n                  <Statistic title=\"Repositories\" value={repos.length} />\r\n                  <Statistic title=\"Organizations\" value={org.length} />\r\n                </div>\r\n              }\r\n            />\r\n          </Card>\r\n\r\n          <Modal\r\n            title=\"Repositories\"\r\n            centered\r\n            visible={visibleRepos}\r\n            onCancel={() => setVisibleRepos(false)}\r\n            footer={[]}\r\n          >\r\n            {repos.length === 0 ? (\r\n              <div style={{ textAlign: \"center\" }}>No Repositories to show</div>\r\n            ) : (\r\n              repos.map((element) => (\r\n                <div key={element} style={{ textAlign: \"center\" }}>\r\n                  <a\r\n                    key={element}\r\n                    href={`https://github.com/${String(\r\n                      location.state\r\n                    )}/${element}`}\r\n                  >\r\n                    <b> {element} </b>\r\n                  </a>\r\n                </div>\r\n              ))\r\n            )}\r\n          </Modal>\r\n\r\n          <Modal\r\n            title=\"Organizations\"\r\n            centered\r\n            visible={visibleOrgs}\r\n            onCancel={() => setVisibleOrgs(false)}\r\n            footer={[]}\r\n          >\r\n            {org.length === 0 ? (\r\n              <div style={{ textAlign: \"center\" }}>\r\n                No Organizations to show\r\n              </div>\r\n            ) : (\r\n              org.map((element) => (\r\n                <div key={element} style={{ textAlign: \"center\" }}>\r\n                  <a key={element} href={`https://github.com/${element}`}>\r\n                    <b> {element} </b>{\" \"}\r\n                  </a>\r\n                </div>\r\n              ))\r\n            )}\r\n          </Modal>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default UserInfo;\r\n","C:\\Users\\jakub\\Development\\Repos-and-Org-of-Git-User\\src\\components\\searchbar.tsx",[],"C:\\Users\\jakub\\Development\\Repos-and-Org-of-Git-User\\src\\components\\theme.tsx",["36"],"import React, { useEffect } from \"react\";\r\nimport { Switch } from \"antd\";\r\nimport { useTheme, Theme } from \"./ThemeContext\";\r\n\r\nconst ThemeButton: React.FC = () => {\r\n  const { theme, setTheme } = useTheme();\r\n\r\n  const setThemeButton = () => {\r\n    if (theme === \"Light\") {\r\n      setTheme(Theme.Dark);\r\n      localStorage.setItem(\"theme\", \"Dark\");\r\n    } else {\r\n      setTheme(Theme.Light);\r\n      localStorage.setItem(\"theme\", \"Light\");\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (localStorage.getItem(\"theme\") === \"Dark\") {\r\n      setTheme(Theme.Dark);\r\n    } else {\r\n      setTheme(Theme.Light);\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <Switch\r\n        style={{ float: \"right\", marginTop: 20, marginRight: 20 }}\r\n        checkedChildren=\"Light\"\r\n        unCheckedChildren=\"Dark\"\r\n        defaultChecked={localStorage.getItem(\"theme\") === \"Dark\"}\r\n        onChange={() => setThemeButton()}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ThemeButton;\r\n","C:\\Users\\jakub\\Development\\Repos-and-Org-of-Git-User\\src\\components\\data.tsx",[],"C:\\Users\\jakub\\Development\\Repos-and-Org-of-Git-User\\src\\components\\ThemeContext.tsx",[],{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","severity":1,"message":"42","line":49,"column":6,"nodeType":"43","endLine":49,"endColumn":8,"suggestions":"44"},{"ruleId":"41","severity":1,"message":"45","line":24,"column":6,"nodeType":"43","endLine":24,"endColumn":8,"suggestions":"46"},"no-native-reassign",["47"],"no-negated-in-lhs",["48"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'location.state'. Either include it or remove the dependency array.","ArrayExpression",["49"],"React Hook useEffect has a missing dependency: 'setTheme'. Either include it or remove the dependency array.",["50"],"no-global-assign","no-unsafe-negation",{"desc":"51","fix":"52"},{"desc":"53","fix":"54"},"Update the dependencies array to be: [location.state]",{"range":"55","text":"56"},"Update the dependencies array to be: [setTheme]",{"range":"57","text":"58"},[1680,1682],"[location.state]",[616,618],"[setTheme]"]